// Generated using `moon info`, DON'T EDIT IT
package "BigOrangeQWQ/immut_multiset/hashmultiset"

import(
  "moonbitlang/core/immut/hashmap"
)

// Values
fn[T : Eq + Hash] from_array(Array[T]) -> ImmutableHashMultiset[T]

fn[T : Eq + Hash] from_iter(Iter[T]) -> ImmutableHashMultiset[T]

fn[T : Eq + Hash] from_iter2(Iter2[T, Int]) -> ImmutableHashMultiset[T]

fn[T] new() -> ImmutableHashMultiset[T]

fn[T : Eq + Hash] of(FixedArray[T]) -> ImmutableHashMultiset[T]

// Errors

// Types and methods
pub struct ImmutableHashMultiset[T] {
  map : @hashmap.T[T, Int]
  size : Int
}
fn[T : Eq + Hash] ImmutableHashMultiset::add(Self[T], T, times? : Int) -> Self[T]
fn[T : Eq + Hash] ImmutableHashMultiset::contains(Self[T], T) -> Bool
fn[T : Eq + Hash] ImmutableHashMultiset::count(Self[T], T) -> Int
fn[T : Eq + Hash] ImmutableHashMultiset::difference(Self[T], Self[T]) -> Self[T]
fn[T] ImmutableHashMultiset::elems(Self[T]) -> Iter[T]
fn[T : Hash + Eq] ImmutableHashMultiset::filter(Self[T], (Int) -> Bool) -> Self[T]
fn[T : Hash + Eq] ImmutableHashMultiset::filteri(Self[T], (T, Int) -> Bool) -> Self[T]
fn[T : Eq + Hash] ImmutableHashMultiset::intersection(Self[T], Self[T]) -> Self[T]
fn[T] ImmutableHashMultiset::is_empty(Self[T]) -> Bool
fn[T] ImmutableHashMultiset::iter(Self[T]) -> Iter[(T, Int)]
fn[T] ImmutableHashMultiset::iter2(Self[T]) -> Iter2[T, Int]
fn[T : Hash + Eq] ImmutableHashMultiset::map(Self[T], (Int) -> Int) -> Self[T]
fn[T : Hash + Eq] ImmutableHashMultiset::mapi(Self[T], (T, Int) -> Int) -> Self[T]
fn[T] ImmutableHashMultiset::new() -> Self[T]
fn[T : Eq + Hash] ImmutableHashMultiset::op_get(Self[T], T) -> Int
fn[T : Eq + Hash] ImmutableHashMultiset::remove(Self[T], T, times? : Int) -> Self[T]
fn[T : Hash + Eq] ImmutableHashMultiset::remove_all(Self[T], T) -> Self[T]
fn[T : Eq + Hash] ImmutableHashMultiset::set(Self[T], T, times? : Int) -> Self[T]
fn[T] ImmutableHashMultiset::size(Self[T]) -> Int
fn[T : Eq + Hash] ImmutableHashMultiset::sum(Self[T], Self[T]) -> Self[T]
fn[T : Eq + Hash] ImmutableHashMultiset::union(Self[T], Self[T]) -> Self[T]
impl[T : Eq + Hash] Add for ImmutableHashMultiset[T]
impl[T : Eq + Hash] BitAnd for ImmutableHashMultiset[T]
impl[T : Eq + Hash] BitOr for ImmutableHashMultiset[T]
impl[T : Eq + Hash] Eq for ImmutableHashMultiset[T]
impl[T : Eq + Hash + Show] Show for ImmutableHashMultiset[T]
impl[T : Eq + Hash] Sub for ImmutableHashMultiset[T]

// Type aliases

// Traits

