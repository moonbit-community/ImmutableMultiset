// Generated using `moon info`, DON'T EDIT IT
package "BigOrangeQWQ/immut_multiset/multiset"

import(
  "moonbitlang/core/immut/sorted_map"
)

// Values
fn[T : Compare] from_array(Array[T]) -> ImmutableMultiset[T]

fn[T : Compare] from_iter(Iter[T]) -> ImmutableMultiset[T]

fn[T : Compare] from_iter2(Iter2[T, Int]) -> ImmutableMultiset[T]

fn[T] new() -> ImmutableMultiset[T]

fn[T : Compare] of(FixedArray[T]) -> ImmutableMultiset[T]

// Errors

// Types and methods
pub struct ImmutableMultiset[T] {
  map : @sorted_map.T[T, Int]
  size : Int
}
fn[T : Compare] ImmutableMultiset::add(Self[T], T, times? : Int) -> Self[T]
fn[T : Compare] ImmutableMultiset::contains(Self[T], T) -> Bool
fn[T : Compare] ImmutableMultiset::count(Self[T], T) -> Int
fn[T : Compare] ImmutableMultiset::difference(Self[T], Self[T]) -> Self[T]
fn[T] ImmutableMultiset::elems(Self[T]) -> Iter[T]
fn[T : Compare] ImmutableMultiset::filter(Self[T], (Int) -> Bool) -> Self[T]
fn[T : Compare] ImmutableMultiset::filteri(Self[T], (T, Int) -> Bool) -> Self[T]
fn[T : Compare] ImmutableMultiset::intersection(Self[T], Self[T]) -> Self[T]
fn[T] ImmutableMultiset::is_empty(Self[T]) -> Bool
fn[T] ImmutableMultiset::iter(Self[T]) -> Iter[(T, Int)]
fn[T] ImmutableMultiset::iter2(Self[T]) -> Iter2[T, Int]
fn[T : Compare] ImmutableMultiset::map(Self[T], (Int) -> Int) -> Self[T]
fn[T : Compare] ImmutableMultiset::mapi(Self[T], (T, Int) -> Int) -> Self[T]
fn[T] ImmutableMultiset::new() -> Self[T]
fn[T : Compare] ImmutableMultiset::op_get(Self[T], T) -> Int
fn[T : Compare] ImmutableMultiset::remove(Self[T], T, times? : Int) -> Self[T]
fn[T : Compare] ImmutableMultiset::remove_all(Self[T], T) -> Self[T]
fn[T : Compare] ImmutableMultiset::set(Self[T], T, times? : Int) -> Self[T]
fn[T] ImmutableMultiset::size(Self[T]) -> Int
fn[T : Compare] ImmutableMultiset::sum(Self[T], Self[T]) -> Self[T]
fn[T : Compare] ImmutableMultiset::union(Self[T], Self[T]) -> Self[T]
impl[T : Compare] Add for ImmutableMultiset[T]
impl[T : Compare] BitAnd for ImmutableMultiset[T]
impl[T : Compare] BitOr for ImmutableMultiset[T]
impl[T : Compare] Eq for ImmutableMultiset[T]
impl[T : Compare + Show] Show for ImmutableMultiset[T]
impl[T : Compare] Sub for ImmutableMultiset[T]

// Type aliases

// Traits

